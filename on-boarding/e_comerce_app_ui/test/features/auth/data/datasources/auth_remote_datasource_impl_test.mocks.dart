// Mocks generated by Mockito 5.4.6 from annotations
// in e_comerce_app_ui/test/features/auth/data/datasources/auth_remote_datasource_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:e_comerce_app_ui/core/error/failure.dart' as _i8;
import 'package:e_comerce_app_ui/core/network/api_client.dart' as _i4;
import 'package:e_comerce_app_ui/features/auth/data/datasources/auth_local_datasource.dart'
    as _i7;
import 'package:e_comerce_app_ui/features/auth/data/models/user_model.dart'
    as _i9;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i4.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl =>
      (super.noSuchMethod(
            Invocation.getter(#baseUrl),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#baseUrl),
            ),
          )
          as String);

  @override
  Map<String, String> get defaultHeaders =>
      (super.noSuchMethod(
            Invocation.getter(#defaultHeaders),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  _i6.Future<_i2.Response> get(String? path, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [path], {#headers: headers}),
            returnValue: _i6.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#get, [path], {#headers: headers}),
              ),
            ),
          )
          as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> post(
    String? path, {
    Map<String, String>? headers,
    Object? body,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#post, [path], {#headers: headers, #body: body}),
            returnValue: _i6.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {#headers: headers, #body: body},
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response>);
}

/// A class which mocks [AuthLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalDatasource extends _i1.Mock
    implements _i7.AuthLocalDatasource {
  MockAuthLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i8.Failure, void>> saveAccessToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#saveAccessToken, [token]),
            returnValue: _i6.Future<_i3.Either<_i8.Failure, void>>.value(
              _FakeEither_1<_i8.Failure, void>(
                this,
                Invocation.method(#saveAccessToken, [token]),
              ),
            ),
          )
          as _i6.Future<_i3.Either<_i8.Failure, void>>);

  @override
  _i6.Future<_i3.Either<_i8.Failure, String>> getAccessToken() =>
      (super.noSuchMethod(
            Invocation.method(#getAccessToken, []),
            returnValue: _i6.Future<_i3.Either<_i8.Failure, String>>.value(
              _FakeEither_1<_i8.Failure, String>(
                this,
                Invocation.method(#getAccessToken, []),
              ),
            ),
          )
          as _i6.Future<_i3.Either<_i8.Failure, String>>);

  @override
  _i6.Future<_i3.Either<_i8.Failure, void>> clearAccessToken() =>
      (super.noSuchMethod(
            Invocation.method(#clearAccessToken, []),
            returnValue: _i6.Future<_i3.Either<_i8.Failure, void>>.value(
              _FakeEither_1<_i8.Failure, void>(
                this,
                Invocation.method(#clearAccessToken, []),
              ),
            ),
          )
          as _i6.Future<_i3.Either<_i8.Failure, void>>);

  @override
  _i6.Future<_i3.Either<_i8.Failure, void>> saveUser(_i9.UserModel? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i6.Future<_i3.Either<_i8.Failure, void>>.value(
              _FakeEither_1<_i8.Failure, void>(
                this,
                Invocation.method(#saveUser, [user]),
              ),
            ),
          )
          as _i6.Future<_i3.Either<_i8.Failure, void>>);

  @override
  _i6.Future<_i3.Either<_i8.Failure, _i9.UserModel>> getUser() =>
      (super.noSuchMethod(
            Invocation.method(#getUser, []),
            returnValue:
                _i6.Future<_i3.Either<_i8.Failure, _i9.UserModel>>.value(
                  _FakeEither_1<_i8.Failure, _i9.UserModel>(
                    this,
                    Invocation.method(#getUser, []),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i8.Failure, _i9.UserModel>>);

  @override
  _i6.Future<_i3.Either<_i8.Failure, void>> clearUser() =>
      (super.noSuchMethod(
            Invocation.method(#clearUser, []),
            returnValue: _i6.Future<_i3.Either<_i8.Failure, void>>.value(
              _FakeEither_1<_i8.Failure, void>(
                this,
                Invocation.method(#clearUser, []),
              ),
            ),
          )
          as _i6.Future<_i3.Either<_i8.Failure, void>>);
}
